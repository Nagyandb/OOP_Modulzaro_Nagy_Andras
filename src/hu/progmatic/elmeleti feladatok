Elméleti feladatok

A választható feladatok közül a kompozíciót választottam.

------
Elmélet 1. feladat:

Különbség az Exception és a RuntimeException között:


Alapvetően kétféle hibatípus van a java-ban: checked exception és unchecked exception. Előbbi az ellenőrzött hiba, míg
az utóbbi az ellenőrizetlen hiba.

Ellenőrzött kivétel (Exception) az a java.lang.exception osztály objektumai és annak alosztályai.

Futásidejű kivétel (RuntimeException) a java.lang.RuntimeException és az összes alosztályból állnak.

Checked (ellenőrzött) exceptionnél a fordító érzékeli a hibalehetőséget, és nem is hajlandó lefordítani a programot, ez a hibalehetőség kezeletlen,
például a fájl beolvasásánál.
Unchecked (nem ellenőrzött) exception-nél a program futása közben előforduló hiba, amelyre nem feltétlen lehetelőre felkészülni.


Különbség: az ellenőrzött kivételkezelést a fordító kényszeríti ki, a futásidejűt viszont nem. Ezért az ellenőrzött
kivételeket el kell dobni vagy kezelni kell a kód összeállításához, de a futásidejű kivételeknél ez nem szükséges.
Tehát a futásidejű kivételek a NEM ellenőrzött kivételek kategóriájába tartoznak a hibákkal együtt.

Kezelése történhet a "throws" paranccsal utána bármilyen Exceptionnel a metódus szignatúrájába írva,illetve a
"try-finally" vagy "try-with resources" módzserekkel


------
Elmélet 2. feladat:

Iterátor segítségével lehet bejárás közben értékekekt eltávolítani értékeket egy kollekcióból, azon belül pedig az
"iterator.remove" paranccsal.

while (iterator.hasNext()) {
                // éppen bejárt érték lekérdezése
                RaceResult result = iterator.next();

                if (result.getPercentage() != 100) {
                    iterator.remove();
                }
            }

------
Elmélet 3. feladat:

Az OOp koncepciói:

1. Absztrakció: Egyszerű dolgok, pl változók, metódusok, objektumok, osztályok használata. A belső logikájuk rejtve marad de
    így is használhatóak. Absztrakt osztlyokkal és interface-ek-vel érjük el őket.
2. Enkapszuláció: Logikai összetartozás, minden egység ami összetartozik az egységben van. Az egység nem lát rá ms egységekre és viszont, mert nem szükséges.
    Osztály esetében ilyenek a field-ek, amiket a private access modifier véd ezáltal.
3. Öröklődés: Az osztályok képesek más osztályokból öröklődni. Vagyis a van egy szülő meg egy gyerek osztály, ahol a gyerek megörökli a szülő field-jeit
    illetve a metódusait. Minden osztály ősosztálya az Object osztály (java.lang.Object).
4. Polimorfizmus (öröklődés): Egy metódus ugyanazon a néven megjelenik többször, mégis más funckiójuk van.
    Fajtái: - overloading: a metódusoknak más típusú és/vagy más mennyiségű bemeneti értékük (paraméterük) van
            - overriding: ilyenkor a gyerek osztály felülírja a szülőben található metódust.

További koncepciók:
- coupling (csatolás) - osztályok láthatósági jelzőjére utal
- cohesion (kohézió) - egy egység egyetlen fix feladatot lát el
- association (asszociáció) - az objektumok közötti kapcsolatot határozza meg (egy objektum milyen viszonyban van egy másikkal)
- aggregation (aggregáció) - az association megvalósítása, amelyben az objektum állapotához tartozik egy másik objektum,
    amely önállóan is létező
- composition (kompozíció) - másik asszociáció, amelyben az objektum állapotához tartozik egy másik objektum, és a
    tartalmazó objektum nem létezik a “szülő” nélkül

------
Elmélet 4. feladat:

Az adatszerkezet amivel a beolvasott meccsek adatait dátum szeiint rendezett sorrendben lehet tárolni az a Map.